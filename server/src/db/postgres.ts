// src/db/postgres.ts
import { PrismaClient } from "@prisma/client";

/** DÃ©tection d'env + logs */
const isProd = process.env.NODE_ENV === "production";

/** Ã‰vite Prisma.LogLevel (pas toujours exportÃ© selon versions) */
type PrismaLogLevel = "query" | "info" | "warn" | "error";
const prismaLog = (isProd ? ["warn", "error"] : ["info", "warn", "error"]) as PrismaLogLevel[];

/** Type des options sans dÃ©pendre de Prisma.* */
const prismaOptions: ConstructorParameters<typeof PrismaClient>[0] = {
  log: prismaLog,
  errorFormat: isProd ? "minimal" : "pretty",
};

/** Typage minimal et stable du middleware */
type PrismaMiddlewareParams = { model?: string; action?: string } & Record<string, unknown>;
type PrismaMiddlewareNext = (params: PrismaMiddlewareParams) => Promise<unknown>;

declare global {
  // eslint-disable-next-line no-var
  var __prisma__: PrismaClient | undefined;
}

function createClient() {
  const client = new PrismaClient(prismaOptions);

  client.$use(async (params: PrismaMiddlewareParams, next: PrismaMiddlewareNext) => {
    const start = Date.now();
    try {
      const result = await next(params);
      const ms = Date.now() - start;

      if (!isProd) {
        const isObject = result && typeof result === "object";
        let size = "";
        if (Array.isArray(result)) {
          size = ` items=${result.length}`;
        } else if (isObject) {
          size = " item=1";
        }
        const model = params.model ?? "$internal";
        const action = params.action ?? "$op";
        console.log(`[prisma] ${model}.${action} (${ms} ms)${size}`);
      }
      return result;
    } catch (e) {
      const ms = Date.now() - start;
      const model = params.model ?? "$internal";
      const action = params.action ?? "$op";
      console.error(`[prisma] ${model}.${action} FAILED after ${ms} ms`);
      throw e;
    }
  });

  client.$on("beforeExit", async () => {
    if (!isProd) console.log("[prisma] beforeExit â‡’ disconnect");
    await client.$disconnect();
  });

  return client;
}

const prismaBase = globalThis.__prisma__ ?? createClient();
if (!isProd) globalThis.__prisma__ = prismaBase;

export const prisma = prismaBase;

/** ArrÃªt propre (SIGINT/SIGTERM) */
async function gracefulExit(signal: string) {
  try {
    console.log(`[prisma] Received ${signal}. Closing DB connections...`);
    await prisma.$disconnect();
  } catch (err) {
    console.error("[prisma] Error during disconnect:", err);
  }
}
process.on("SIGINT", () => void gracefulExit("SIGINT"));
process.on("SIGTERM", () => void gracefulExit("SIGTERM"));

/**
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * ðŸŽ“ RÃ©sumÃ© pÃ©dagogique dÃ©taillÃ©
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * âœ… Pourquoi ce fichier existe ?
 *    â†’ Centralise une instance unique de Prisma pour Ã©viter la saturation
 *      des connexions pendant le hot-reload en dÃ©veloppement.
 *
 * âœ… Pourquoi un Â« Singleton Â» avec globalThis ?
 *    â†’ En dev, lors du rafraÃ®chissement du code (Vite/tsx/watch),
 *      plusieurs PrismaClient seraient crÃ©Ã©s â†’ trop de connexions Postgres.
 *
 * âœ… Ã€ quoi sert le middleware $use ?
 *    â†’ Il intercepte toutes les requÃªtes Prisma :
 *       - mesure du temps dâ€™exÃ©cution
 *       - journalisation par modÃ¨le/opÃ©ration
 *       - meilleur debugging sans logs SQL volumineux
 *
 * âœ… Typage custom
 *    â†’ Certaines versions de Prisma nâ€™exportant pas correctement `Prisma.*`,
 *      on utilise des types gÃ©nÃ©riques robustes et indÃ©pendants.
 *
 * âœ… ArrÃªt propre
 *    â†’ Avant que Node sâ€™arrÃªte (Docker/K8s/CTRL+C),
 *      Prisma ferme proprement les connexions (`beforeExit`, SIGINT, SIGTERM)
 *
 * âœ… Production vs DÃ©veloppement
 *    - Dev : logs dÃ©taillÃ©s
 *    - Prod : logs rÃ©duits (silencieux sauf erreurs)
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 */