# --- Dev image: hot-reload TypeScript avec tsx ---
FROM node:22-alpine

WORKDIR /usr/src/app

# D√©pendances natives utiles + openssl pour Prisma
RUN apk add --no-cache openssl libc6-compat python3 make g++ bash

# 1) D√©pendances
COPY package*.json ./
RUN npm ci

# 2) (optionnel) Prisma pour l‚Äôautocompl√©tion
COPY prisma ./prisma
RUN npx prisma generate || true

# 3) PAS de COPY du code: il sera mont√© par docker-compose
RUN mkdir -p /usr/src/app/uploads

EXPOSE 8080 5555
# CMD d√©fini par docker-compose (npm run dev:wait)

################################################################################
### üéì R√©sum√© p√©dagogique d√©taill√© ‚Äî Dockerfile de d√©veloppement Node/TypeScript
###
### ‚úÖ Objectif de cette image :
### - Permettre le d√©veloppement en hot-reload sans reconstruire l‚Äôimage √† chaque
###   changement de code source (rapidit√© ++)
### - Utiliser `tsx` ou `nodemon` pour recharger le serveur
### - G√©rer Prisma et ses d√©pendances syst√®me (OpenSSL, libc6-compat)
###
### ‚úÖ Pourquoi NE PAS copier le code source ici ?
### - Le code sera mont√© en volume par docker-compose :
###       ./src ‚Üí /usr/src/app/src
###   ‚ü∂ Les modifications locales sont visibles instantan√©ment dans le conteneur
###   ‚ü∂ Pas besoin de reconstruire l‚Äôimage √† chaque fois
###
### ‚úÖ Pourquoi installer OpenSSL + libc6-compat ?
### - Prisma n√©cessite OpenSSL pour communiquer avec PostgreSQL/Mongo
### - `libc6-compat` corrige certaines d√©pendances binaires manquantes dans Alpine
###
### ‚úÖ Pourquoi copier seulement package.json avant npm ci ?
### - Optimise le cache Docker üéØ
###   Si tu modifies juste le code (et pas les d√©pendances),
###   Docker ne relance pas `npm ci` (gain de temps √©norme)
###
### ‚úÖ npm ci plut√¥t que npm install ?
### - `npm ci` est optimis√© pour CI/CD + builds reproductibles
### - Utilise exactement package-lock.json
###
### ‚úÖ Ports expos√©s :
### - 8080 : API backend
### - 5555 : Prisma Studio (si utilis√©)
###
### ‚úÖ Commande d‚Äôex√©cution non fix√©e ici
### - Elle sera d√©finie dans docker-compose (ex: npm run dev:wait)
###   pour simplifier les overrides selon l‚Äôenvironnement
###
### En r√©sum√© :
### ‚Üí D√©veloppement ultra-rapide
### ‚Üí Connexion DB Prisma fonctionnelle
### ‚Üí Caching optimal des d√©pendances
### ‚Üí Configuration pilot√©e par docker-compose
################################################################################
